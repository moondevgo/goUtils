package guTa

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	basic "github.com/moondevgo/goUtils/guBasic"
	doc "github.com/moondevgo/goUtils/guDoc"
)

// TODO: 좀더 단순하게 하는 방법 모색
func ConvType(data interface{}, typ string) (data_ interface{}) {
	switch typ {
	case "string":
		data_ = data.(string)
	case "float64":
		data_ = basic.FloatFromStr(data.(string))
	case "int":
		data_ = basic.IntFromStr(data.(string))
	default:
		data_ = data.(string)
	}
	return data_
}

// 2023-01-02	1000	1100	900	1050	23
// format: "%s\t%f\t%f\t%f\t%f\t%f"
func ReadCandlesFromCsv(path, format string) ([]Candle, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	var candles []Candle
	s := bufio.NewScanner(f)

	for s.Scan() {
		candle := Candle{}
		_, err := fmt.Sscanf(s.Text(), format, &candle.Datetime, &candle.Open, &candle.High, &candle.Low, &candle.Close, &candle.Volume)
		if err != nil {
			log.Printf("discarding bad data point %q: %v", s.Text(), err)
		}
		// log.Printf("\ncandle: %v\n", candle)
		candles = append(candles, candle)
	}

	if err := s.Err(); err != nil {
		return nil, fmt.Errorf("could not scan: %v", err)
	}

	return candles, nil
}

// * Maps -> Candles
func CandlesFromMaps(data []map[string]interface{}) []Candle {
	candles := []Candle{}
	for _, d := range data {
		candle := Candle{}
		candle.Datetime = strings.ReplaceAll(d["Datetime"].(string), "-", "") // 날짜 '-' 제거
		candle.Open = basic.FloatFromStr(d["Open"].(string))
		candle.High = basic.FloatFromStr(d["High"].(string))
		candle.Low = basic.FloatFromStr(d["Low"].(string))
		candle.Close = basic.FloatFromStr(d["Close"].(string))
		candle.Volume = basic.FloatFromStr(d["Volume"].(string))

		candles = append(candles, candle)
	}
	return candles
}

func CandleChartFromMaps(shcode string, data []map[string]interface{}) CandleChart {
	candles := CandlesFromMaps(data)
	// TODO: Interval이 잘못 나오는 경우 확인(ex) 0번째, 1번째 간격이 다른 간격과 다른 경우, 휴일이 끼어 있는 경우) 고려
	return CandleChart{
		Shcode:  shcode,
		Candles: candles,
		// Interval: basic.IntervalFromTimes(candles[0].Datetime, candles[1].Datetime),
	}
}

// 포스코케미칼(일).csv	포스코케미칼(일)
func ReadCandlesFromXlsx(path, sheetName string) []Candle {
	name := strings.Split(filepath.Base(path), "(")[0]
	fields := map[string]string{
		"Datetime": "[일시]" + name,
		"Open":     "시가",
		"High":     "고가",
		"Low":      "저가",
		"Close":    "종가",
		"Volume":   "[거래량]",
	}
	excel := &doc.Excel{path, sheetName}
	excel.Open()

	return CandlesFromMaps(excel.Read("Sheet1", fields))
}

// 포스코케미칼(일).csv	포스코케미칼(일)
func ReadCandlesFromXlsxMap(path, sheetName string) []map[string]interface{} {
	fields := map[string]string{
		"Datetime": "[일시]포스코케미칼",
		"Open":     "시가",
		"High":     "고가",
		"Low":      "저가",
		"Close":    "종가",
		"Volume":   "[거래량]",
	}
	types := map[string]string{
		"Datetime": "string",
		"Open":     "float64",
		"High":     "float64",
		"Low":      "float64",
		"Close":    "float64",
		"Volume":   "float64",
	}
	// fields := []string{"[일시]포스코케미칼", "시가", "고가", "저가", "종가", "[거래량]"}
	excel := &doc.Excel{path, sheetName}
	// excel := &doc.Excel{`C:\MoonDev\withLang\inGo\goProject\gpStock\src\exec\data\포스코케미칼(일).xlsx`, "Sheet1"}
	excel.Open()
	data := excel.Read("Sheet1", fields)

	// ? type 적용
	rsts := []map[string]interface{}{}
	for _, d := range data {
		rst := map[string]interface{}{}
		for k, typ := range types {
			// log.Printf("\nReadCandlesFromXlsx k: %v, typ: %v, d[k]: %v\n", k, typ, d[k])
			rst[k] = ConvType(d[k], typ)
		}
		rsts = append(rsts, rst)
	}
	// fmt.Printf("\ndata: %v\n", data)
	// return data
	return rsts
}

func CandleChartFromXlsx(shcode, path, sheetName string) CandleChart {
	name := strings.Split(filepath.Base(path), "(")[0]
	fields := map[string]string{
		"Datetime": "[일시]" + name,
		"Open":     "시가",
		"High":     "고가",
		"Low":      "저가",
		"Close":    "종가",
		"Volume":   "[거래량]",
	}
	excel := &doc.Excel{path, sheetName}
	excel.Open()

	return CandleChartFromMaps(shcode, excel.Read("Sheet1", fields))
}

func ReadCandlesFromGSheet(path string) []Candle {
	return []Candle{}
}

// * mysql
func ReadCandlesFromMysql(path string) []Candle {
	return []Candle{}
}

func FetchCandlesFromEbest(path string) []Candle {
	return []Candle{}
}

func FetchCandlesFromYahoo(path string) []Candle {
	return []Candle{}
}

func FetchCandlesFromNaver(path string) []Candle {
	return []Candle{}
}
